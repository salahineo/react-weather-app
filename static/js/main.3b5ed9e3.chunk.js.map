{"version":3,"sources":["Components/Form/Form.js","Components/Weather/Weather.js","Components/Footer/Footer.js","App.js","index.js"],"names":["Form","this","props","getCountries","countries","getWeather","className","onSubmit","name","id","onChange","e","target","nextElementSibling","removeAttribute","map","country","index","value","type","placeholder","disabled","React","Component","Weather","weather_temperature","weather_description","weather_humidity","weather_clouds","weather_wind_speed","style","transform","weather_sunrise","weather_sunset","error","Footer","footer_copyright_year","Date","String","getFullYear","href","rel","require","API_Key","App","state","weather_pressure","weather_wind_degree","tempArray","i","length","push","setState","toggleColorMode","document","documentElement","setAttribute","a","preventDefault","countryName","elements","cityName","city","fetch","data","json","readableData","cod","sys","sunrise","sunriseTime","sunset","sunsetTime","toLocaleString","split","weather","description","Math","round","main","temp","pressure","humidity","clouds","all","wind","speed","deg","Fragment","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3b5ed9e3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Form.css\";\n\nclass Form extends React.Component {\n\n  // Component Did Mount Method\n  componentDidMount() {\n    // Load Countries After Component Load\n    this.props.getCountries();\n  }\n\n  // Render Method\n  render() {\n    // Get Props\n    let {countries, getWeather} = this.props;\n    return (\n      <div className=\"form\">\n        <form onSubmit={getWeather}>\n          <select name=\"countries\" id=\"countries\" onChange={(e) => {\n            // Unlock City Input\n            e.target.nextElementSibling.removeAttribute(\"disabled\");\n          }}>\n            <option>-- Select Country --</option>\n            {\n              countries.map((country, index) => {\n                return (\n                  <option key={index} value={country.name}>{country.name}</option>\n                );\n              })\n            }\n          </select>\n          <input type=\"text\" name='city' id='city' placeholder='Enter City' disabled onChange={(e) => e.target.nextElementSibling.removeAttribute(\"disabled\")} />\n          <button type=\"submit\" disabled>Get Weather</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\nimport \"./Weather.css\";\n\nconst Weather = (props) => {\n  return (\n    <div className=\"weather\">\n      <div className=\"temperature\">\n        {props.weather_temperature && <span>{props.weather_temperature}° C</span>}\n      </div>\n      <div className=\"description\">\n        {props.weather_description && <span>{props.weather_description}</span>}\n      </div>\n      <div className=\"additional-info\">\n        <span className=\"humidity\">\n          {props.weather_humidity &&\n          <span className=\"info\"><i className=\"fas fa-tint\" /> <span className=\"name\">Humidity</span> <span className=\"value\">{props.weather_humidity}%</span></span>}\n        </span>\n        <span className=\"clouds\">\n          {props.weather_clouds !== \"\" &&\n          <span className=\"info\"><i className=\"fas fa-cloud\" /> <span className=\"name\">Clouds</span> <span className=\"value\">{props.weather_clouds}%</span></span>}\n        </span>\n        <span className=\"wind\">\n          {props.weather_wind_speed &&\n          <span className=\"info\"><i className=\"fas fa-wind\" /> <span className=\"name\">Wind</span> <span className=\"value\">{props.weather_wind_speed}\n            <i className=\"fas fa-long-arrow-alt-up fa-rotate-90\"\n               style={{transform: `rotate(${props.weather_wind_speed * 100}deg)`}} /></span></span>}\n        </span>\n        <span className=\"sunrise\">\n          {props.weather_sunrise &&\n          <span className=\"info\"><i className=\"fas fa-sun\" /> <span className=\"name\">Sunrise</span> <span className=\"value\">{props.weather_sunrise}</span></span>}\n        </span>\n        <span className=\"sunset\">\n          {props.weather_sunset &&\n          <span className=\"info\"><i className=\"fas fa-moon\" /> <span className=\"name\">Sunset</span> <span className=\"value\">{props.weather_sunset}</span></span>}\n        </span>\n      </div>\n      <div className=\"error\">\n        {props.error && <span><i className=\"fas fa-exclamation-circle\" /> {props.error}</span>}\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n","import \"./Footer.css\";\n\nconst Footer = () => {\n  // Get Current Year For Copyright\n  let footer_copyright_year = new Date();\n\n  return (\n    <footer className=\"footer\">\n      <div className=\"footer-container\">\n        <div className=\"copyright\">\n          © <span>{String(footer_copyright_year.getFullYear())}</span> | <span className=\"author\">Mohamed Salah</span>\n        </div>\n        <div className=\"links\">\n          <a href=\"https://github.com/salahineo\" target=\"_blank\" rel=\"noreferrer\">\n            <i className=\"fab fa-github\" />\n          </a>\n          <a href=\"https://www.linkedin.com/in/salahineo/\" target=\"_blank\" rel=\"noreferrer\">\n            <i className=\"fab fa-linkedin-in\" />\n          </a>\n          <a href=\"https://twitter.com/salahineo\" target=\"_blank\" rel=\"noreferrer\">\n            <i className=\"fab fa-twitter\" />\n          </a>\n          <a href=\"https://www.facebook.com/salahineo/\" target=\"_blank\" rel=\"noreferrer\">\n            <i className=\"fab fa-facebook-f\" />\n          </a>\n          <a href=\"https://salahineo.github.io/salahineo/\" target=\"_blank\" rel=\"noreferrer\">\n            <i className=\"fas fa-globe-africa\" />\n          </a>\n          <a href=\"mailto:salahineo.work@gmail.com\" target=\"_blank\" rel=\"noreferrer\">\n            <i className=\"fas fa-envelope\" />\n          </a>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./assets/css/font-awesome/css/fontawesome.css\";\nimport Form from \"./Components/Form/Form\";\nimport Weather from \"./Components/Weather/Weather\";\nimport Footer from \"./Components/Footer/Footer\";\n\n// Require Countries Data\nconst countries = require(\"./Data/countries.json\");\n\n// OpenWeatherMap [Personal] API Key\nconst API_Key = \"d2b8ce582dda5538a8f06a810447abc7\";\n\nclass App extends React.Component {\n\n  // State Data\n  state = {\n    countries: [],\n    weather_description: \"\",\n    weather_temperature: \"\",\n    weather_pressure: \"\",\n    weather_humidity: \"\",\n    weather_clouds: \"\",\n    weather_wind_speed: \"\",\n    weather_wind_degree: \"\",\n    weather_sunrise: \"\",\n    weather_sunset: \"\",\n    error: \"\"\n  };\n\n\n  // Get List Of Countries\n  getCountries = () => {\n    // Temporary Array\n    let tempArray = [];\n    // Loop Through Countries JSON File\n    for (let i = 0; i < countries.length; i++) {\n      // Push Current Country To Array\n      tempArray.push(countries[i]);\n    }\n    // Update Data State\n    this.setState({\n      countries: tempArray\n    });\n  };\n\n  // Toggle Color Mode\n  toggleColorMode = () => {\n    // Get Temperature From State\n    let {weather_temperature} = this.state;\n    if (weather_temperature === \"\") {\n      // Temperature Is Empty\n      document.documentElement.setAttribute(\"data-theme\", \"cold\");\n    } else if (weather_temperature > 18) {\n      // Temperature > 18\n      document.documentElement.setAttribute(\"data-theme\", \"warm\");\n    } else {\n      // Temperature < 18\n      document.documentElement.setAttribute(\"data-theme\", \"cold\");\n    }\n  };\n\n  // Get Weather Method\n  getWeather = async (e) => {\n    // Prevent Form Reloading\n    e.preventDefault();\n    // Get Selected Country Name\n    let countryName = e.target.elements.countries.value;\n    // Get City Name\n    let cityName = e.target.elements.city.value;\n    //console.log(countryName,cityName);\n    // Fetch API Data For This City\n    const data = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName},${countryName}&units=metric&appid=${API_Key}`);\n    // Convert Data To JSON\n    const readableData = await data.json();\n    // If There Is A Response\n    if (readableData.cod === 200) {\n      // Sunrise Convert To Readable Date\n      const sunriseTime = await new Date(readableData.sys.sunrise * 1000);\n      const sunsetTime = await new Date(readableData.sys.sunset * 1000);\n      let sunrise = sunriseTime.toLocaleString(\"en-US\").split(\", \")[1];\n      let sunset = sunsetTime.toLocaleString(\"en-US\").split(\", \")[1];\n\n      // Set Weather Data To State\n      this.setState({\n        weather_description: readableData.weather[0].description,\n        weather_temperature: Math.round(readableData.main.temp),\n        weather_pressure: readableData.main.pressure,\n        weather_humidity: readableData.main.humidity,\n        weather_clouds: readableData.clouds.all,\n        weather_wind_speed: readableData.wind.speed,\n        weather_wind_degree: readableData.wind.deg,\n        weather_sunrise: sunrise,\n        weather_sunset: sunset,\n        error: \"\"\n      });\n      // Toggle Color Mode Depend On Temperature\n      await this.toggleColorMode();\n    } else {\n      // Set Error Message\n      this.setState({\n        weather_description: \"\",\n        weather_temperature: \"\",\n        weather_pressure: \"\",\n        weather_humidity: \"\",\n        weather_clouds: \"\",\n        weather_wind_speed: \"\",\n        weather_wind_degree: \"\",\n        weather_sunrise: \"\",\n        weather_sunset: \"\",\n        error: \"No City Found With This Name!\"\n      })\n    }\n  };\n\n  // Render Method\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <main>\n            <h2>Choose Country</h2>\n            <Form countries={this.state.countries}\n                  getCountries={this.getCountries}\n                  getWeather={this.getWeather} />\n            <Weather weather_description={this.state.weather_description}\n                     weather_temperature={this.state.weather_temperature}\n                     weather_pressure={this.state.weather_pressure}\n                     weather_humidity={this.state.weather_humidity}\n                     weather_clouds={this.state.weather_clouds}\n                     weather_wind_speed={this.state.weather_wind_speed}\n                     weather_wind_degree={this.state.weather_wind_degree}\n                     weather_sunrise={this.state.weather_sunrise}\n                     weather_sunset={this.state.weather_sunset}\n                     error={this.state.error} />\n          </main>\n        </div>\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}